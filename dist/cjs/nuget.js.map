{"version":3,"sources":["nuget.cjs"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst _ = require('underscore');\nconst Queue = require('queue-async');\nconst es = require('event-stream');\nconst et = require('elementtree');\nconst crypto = require('crypto');\nconst vinyl = require('vinyl-fs');\nconst spawn = require('cross-spawn-cb');\n\nrequire('shelljs/global');\nconst NUGET_EXE = path.resolve(path.join(__dirname, './bin/NuGet.exe'));\n\nconst runCommand = (command, args, callback) => {\n  args = [command].concat(args);\n  if (process.platform !== 'win32') args.unshift('mono');\n  spawn(NUGET_EXE, args, {}, callback);\n};\n\nconst getFile = (file, callback) => {\n  if (file.pipe) return callback(null, file);\n\n  vinyl.src(file).pipe(\n    es.writeArray((err, files) => {\n      if (err) return callback(err);\n      if (files.length === 0 || files.length > 1) {\n        return callback(new Error(`Expecting one file for ${file}. Found ${files.length}`));\n      }\n      return callback(null, files[0]);\n    })\n  );\n};\n\nconst randomFilename = () =>\n  `${crypto\n    .createHash('sha1')\n    .update(new Date().getTime().toString() + _.uniqueId())\n    .digest('hex')}.nupkg`;\n\n// biome-ignore lint/complexity/noStaticOnlyClass: <explanation>\nclass NodeNuget {\n  static setApiKey(key, callback) {\n    runCommand('setApiKey', [key], callback);\n  }\n\n  static pack(file, callback) {\n    getFile(file, (err, file) => {\n      if (err) return callback(err);\n\n      file.pipe(\n        es.wait((err, data) => {\n          if (err) return callback(err);\n\n          const packageDesc = et.parse(data.toString());\n          const packageId = packageDesc.findtext('./metadata/id');\n          const packageVersion = packageDesc.findtext('./metadata/version');\n\n          const files = packageDesc.findall('./files/file').map((x) => path.join(path.dirname(file.path), x.attrib ? x.attrib.src : undefined));\n          const missingFiles = files.filter((x) => !fs.existsSync(x));\n          if (missingFiles.length) return callback(new Error(`Nuget: cannot build ${file.path}. Missing files: ${missingFiles}`));\n\n          runCommand('pack', [file.path], (err) => {\n            if (err) return callback(err);\n\n            const packagePath = path.resolve(path.join(process.cwd(), '.', `${packageId}.${packageVersion}.nupkg`));\n            getFile(packagePath, (err, file) => {\n              if (err) return callback(err);\n              fs.unlink(packagePath, () => callback(err, file));\n            });\n          });\n        })\n      );\n    });\n  }\n\n  static push(file, callback) {\n    let filePath = null;\n    let owned = false;\n\n    const queue = new Queue(1);\n\n    // ensure there is a file on disk\n    queue.defer((callback) => {\n      if (!file.pipe) return callback(null, file);\n      filePath = file.path;\n      if (fs.existsSync(filePath)) return callback(); // use if exists on disk\n      callback = _.once(callback);\n      filePath = randomFilename();\n      owned = true;\n      file.pipe(fs.createWriteStream(filePath)).on('finish', callback).on('error', callback);\n    });\n\n    // run push command\n    queue.defer(runCommand.bind(null, 'push', [filePath, '-Source', 'nuget.org', '-NonInteractive']));\n\n    // clean up temp file if needed\n    return queue.await((err) => {\n      if (filePath && owned && fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n      }\n      return callback(err);\n    });\n  }\n}\nmodule.exports = NodeNuget;\n"],"names":["fs","require","path","_","Queue","es","et","crypto","vinyl","spawn","NUGET_EXE","resolve","join","__dirname","runCommand","command","args","callback","concat","process","platform","unshift","getFile","file","pipe","src","writeArray","err","files","length","Error","randomFilename","createHash","update","Date","getTime","toString","uniqueId","digest","NodeNuget","setApiKey","key","pack","wait","data","packageDesc","parse","packageId","findtext","packageVersion","findall","map","x","dirname","attrib","undefined","missingFiles","filter","existsSync","packagePath","cwd","unlink","push","filePath","owned","queue","defer","once","createWriteStream","on","bind","await","unlinkSync","module","exports"],"mappings":"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"}